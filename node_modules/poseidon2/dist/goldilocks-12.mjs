import { F1Field as u, Poseidon2 as m, getPoseidon2Params as p } from "./poseidon2.mjs";
const P = [
  BigInt("14102670999874605823"),
  BigInt("15585654191999307701"),
  BigInt("940187017142450254"),
  BigInt("8747386241522630710"),
  BigInt("6750641561540124746"),
  BigInt("7440998025584530006"),
  BigInt("6136358134615751535"),
  BigInt("12413576830284969610"),
  BigInt("11675438539028694708"),
  BigInt("17580553691069642925"),
  BigInt("892707462476851330"),
  BigInt("15167485180850043743")
], t = BigInt(0), _ = [], A = [
  [
    BigInt("0x13dcf33aba214f46"),
    BigInt("0x30b3b654a1da6d83"),
    BigInt("0x1fc634ada6159b56"),
    BigInt("0x937459964dc03466"),
    BigInt("0xedd2ef2ca7949924"),
    BigInt("0xede9affde0e22f68"),
    BigInt("0x8515b9d6bac9282d"),
    BigInt("0x6b5c07b4e9e900d8"),
    BigInt("0x1ec66368838c8a08"),
    BigInt("0x9042367d80d1fbab"),
    BigInt("0x400283564a3c3799"),
    BigInt("0x4a00be0466bca75e")
  ],
  [
    BigInt("0x7913beee58e3817f"),
    BigInt("0xf545e88532237d90"),
    BigInt("0x22f8cb8736042005"),
    BigInt("0x6f04990e247a2623"),
    BigInt("0xfe22e87ba37c38cd"),
    BigInt("0xd20e32c85ffe2815"),
    BigInt("0x117227674048fe73"),
    BigInt("0x4e9fb7ea98a6b145"),
    BigInt("0xe0866c232b8af08b"),
    BigInt("0x00bbc77916884964"),
    BigInt("0x7031c0fb990d7116"),
    BigInt("0x240a9e87cf35108f")
  ],
  [
    BigInt("0x2e6363a5a12244b3"),
    BigInt("0x5e1c3787d1b5011c"),
    BigInt("0x4132660e2a196e8b"),
    BigInt("0x3a013b648d3d4327"),
    BigInt("0xf79839f49888ea43"),
    BigInt("0xfe85658ebafe1439"),
    BigInt("0xb6889825a14240bd"),
    BigInt("0x578453605541382b"),
    BigInt("0x4508cda8f6b63ce9"),
    BigInt("0x9c3ef35848684c91"),
    BigInt("0x0812bde23c87178c"),
    BigInt("0xfe49638f7f722c14")
  ],
  [
    BigInt("0x8e3f688ce885cbf5"),
    BigInt("0xb8e110acf746a87d"),
    BigInt("0xb4b2e8973a6dabef"),
    BigInt("0x9e714c5da3d462ec"),
    BigInt("0x6438f9033d3d0c15"),
    BigInt("0x24312f7cf1a27199"),
    BigInt("0x23f843bb47acbf71"),
    BigInt("0x9183f11a34be9f01"),
    BigInt("0x839062fbb9d45dbf"),
    BigInt("0x24b56e7e6c2e43fa"),
    BigInt("0xe1683da61c962a72"),
    BigInt("0xa95c63971a19bfa7")
  ],
  [
    BigInt("0x4adf842aa75d4316"),
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t
  ],
  [
    BigInt("0xf8fbb871aa4ab4eb"),
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t
  ],
  [
    BigInt("0x68e85b6eb2dd6aeb"),
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t
  ],
  [
    BigInt("0x07a0b06b2d270380"),
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t
  ],
  [
    BigInt("0xd94e0228bd282de4"),
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t
  ],
  [
    BigInt("0x8bdd91d3250c5278"),
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t
  ],
  [
    BigInt("0x209c68b88bba778f"),
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t
  ],
  [
    BigInt("0xb5e18cdab77f3877"),
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t
  ],
  [
    BigInt("0xb296a3e808da93fa"),
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t
  ],
  [
    BigInt("0x8370ecbda11a327e"),
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t
  ],
  [
    BigInt("0x3f9075283775dad8"),
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t
  ],
  [
    BigInt("0xb78095bb23c6aa84"),
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t
  ],
  [
    BigInt("0x3f36b9fe72ad4e5f"),
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t
  ],
  [
    BigInt("0x69bc96780b10b553"),
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t
  ],
  [
    BigInt("0x3f1d341f2eb7b881"),
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t
  ],
  [
    BigInt("0x4e939e9815838818"),
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t
  ],
  [
    BigInt("0xda366b3ae2a31604"),
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t
  ],
  [
    BigInt("0xbc89db1e7287d509"),
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t
  ],
  [
    BigInt("0x6102f411f9ef5659"),
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t
  ],
  [
    BigInt("0x58725c5e7ac1f0ab"),
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t
  ],
  [
    BigInt("0x0df5856c798883e7"),
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t
  ],
  [
    BigInt("0xf7bb62a8da4c961b"),
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t,
    t
  ],
  [
    BigInt("0xc68be7c94882a24d"),
    BigInt("0xaf996d5d5cdaedd9"),
    BigInt("0x9717f025e7daf6a5"),
    BigInt("0x6436679e6e7216f4"),
    BigInt("0x8a223d99047af267"),
    BigInt("0xbb512e35a133ba9a"),
    BigInt("0xfbbf44097671aa03"),
    BigInt("0xf04058ebf6811e61"),
    BigInt("0x5cca84703fac7ffb"),
    BigInt("0x9b55c7945de6469f"),
    BigInt("0x8e05bf09808e934f"),
    BigInt("0x2ea900de876307d7")
  ],
  [
    BigInt("0x7748fff2b38dfb89"),
    BigInt("0x6b99a676dd3b5d81"),
    BigInt("0xac4bb7c627cf7c13"),
    BigInt("0xadb6ebe5e9e2f5ba"),
    BigInt("0x2d33378cafa24ae3"),
    BigInt("0x1e5b73807543f8c2"),
    BigInt("0x09208814bfebb10f"),
    BigInt("0x782e64b6bb5b93dd"),
    BigInt("0xadd5a48eac90b50f"),
    BigInt("0xadd4c54c736ea4b1"),
    BigInt("0xd58dbb86ed817fd8"),
    BigInt("0x6d5ed1a533f34ddd")
  ],
  [
    BigInt("0x28686aa3e36b7cb9"),
    BigInt("0x591abd3476689f36"),
    BigInt("0x047d766678f13875"),
    BigInt("0xa2a11112625f5b49"),
    BigInt("0x21fd10a3f8304958"),
    BigInt("0xf9b40711443b0280"),
    BigInt("0xd2697eb8b2bde88e"),
    BigInt("0x3493790b51731b3f"),
    BigInt("0x11caf9dd73764023"),
    BigInt("0x7acfb8f72878164e"),
    BigInt("0x744ec4db23cefc26"),
    BigInt("0x1e00e58f422c6340")
  ],
  [
    BigInt("0x21dd28d906a62dda"),
    BigInt("0xf32a46ab5f465b5f"),
    BigInt("0xbfce13201f3f7e6b"),
    BigInt("0xf30d2e7adb5304e2"),
    BigInt("0xecdf4ee4abad48e9"),
    BigInt("0xf94e82182d395019"),
    BigInt("0x4ee52e3744d887c5"),
    BigInt("0xa1341c7cac0083b2"),
    BigInt("0x2302fb26c30c834a"),
    BigInt("0xaea3c587273bf7d3"),
    BigInt("0xf798e24961823ec7"),
    BigInt("0x962deba3e9a2cd94")
  ]
], F = new u(BigInt("18446744069414584321")), b = new m(
  p(12, 7, 8, 22, P, _, A),
  F
), f = 8, N = 12, I = BigInt(0), B = b.primeField;
function l(i, g) {
  const d = i.length;
  let e = [
    I,
    I,
    I,
    I,
    I,
    I,
    I,
    I,
    I,
    I,
    I,
    I
  ];
  const x = Math.floor(d / f);
  for (let n = 0; n < x; n++) {
    e[0] = B.e(i[n * 8]), e[1] = B.e(i[n * 8 + 1]), e[2] = B.e(i[n * 8 + 2]), e[3] = B.e(i[n * 8 + 3]), e[4] = B.e(i[n * 8 + 4]), e[5] = B.e(i[n * 8 + 5]), e[6] = B.e(i[n * 8 + 6]), e[7] = B.e(i[n * 8 + 7]);
    const a = b.permute(e);
    e[0] = a[0], e[1] = a[1], e[2] = a[2], e[3] = a[3], e[4] = a[4], e[5] = a[5], e[6] = a[6], e[7] = a[7], e[8] = a[8], e[9] = a[9], e[10] = a[10], e[11] = a[11];
  }
  const o = x * f, c = d - o;
  if (c > 0 && c < e.length) {
    for (let a = 0; a < c; a++)
      e[a] = B.e(i[o + a]);
    const n = b.permute(e);
    e[0] = n[0], e[1] = n[1], e[2] = n[2], e[3] = n[3], e[4] = n[4], e[5] = n[5], e[6] = n[6], e[7] = n[7], e[8] = n[8], e[9] = n[9], e[10] = n[10], e[11] = n[11];
  }
  if (g === 4)
    return [e[0], e[1], e[2], e[3]];
  const r = [], h = Math.ceil(g / f);
  let s = 0;
  for (let n = 0; n < h; n++) {
    for (let a = 0; a < f && s < g; a++)
      r.push(e[a]), s++;
    e = b.permute(e);
  }
  return r;
}
function E(i) {
  const g = i.concat([]);
  for (g.push(BigInt(1)); (g.length + 1) % N !== 0; )
    g.push(I);
  return g.push(BigInt(1)), l(g, 4).slice(0, 4);
}
function T(i) {
  const g = l(i, 4);
  return [g[0], g[1], g[2], g[3]];
}
function R(i, g) {
  return Array.isArray(g) ? b.permute(
    i.concat(g).map((d) => B.e(d))
  ).slice(0, 4) : b.permute(
    i.map((d) => B.e(d)).concat([I, I, I, I])
  ).slice(0, 4);
}
function w(i, g) {
  return T([i[0], i[1], i[2], i[3], g[0], g[1], g[2], g[3]]);
}
b.permute.bind(b);
const G = b.primeField, k = b.permute.bind(b);
export {
  G as F,
  b as Poseidon2Goldilocks12,
  R as hashCapacity,
  l as hashNToMNoPad,
  T as hashNoPad,
  E as hashPad,
  k as permute,
  w as twoToOne
};
//# sourceMappingURL=goldilocks-12.mjs.map
