var f = Object.defineProperty;
var g = (l, e, r) => e in l ? f(l, e, { enumerable: !0, configurable: !0, writable: !0, value: r }) : l[e] = r;
var p = (l, e, r) => (g(l, typeof e != "symbol" ? e + "" : e, r), r);
class I {
  constructor(e) {
    p(this, "prime");
    p(this, "zero", BigInt(0));
    p(this, "one", BigInt(1));
    this.prime = e;
  }
  e(e) {
    return typeof e == "bigint" ? e % this.prime : BigInt(e) % this.prime;
  }
  add(e, r) {
    return (e + r) % this.prime;
  }
  sub(e, r) {
    return (this.prime + e - r) % this.prime;
  }
  mul(e, r) {
    return e * r % this.prime;
  }
  square(e) {
    return e * e % this.prime;
  }
  div(e, r) {
    return e / r % this.prime;
  }
}
class x {
  constructor(e, r) {
    p(this, "params");
    p(this, "primeField");
    this.params = e, this.primeField = r;
  }
  getT() {
    return this.params.t;
  }
  sbox(e) {
    return e.map((r) => this.sboxP(r));
  }
  sboxP(e) {
    const r = this.primeField.square(e);
    if (this.params.d == 3)
      return this.primeField.mul(r, e);
    if (this.params.d == 5)
      return this.primeField.mul(this.primeField.square(r), e);
    if (this.params.d == 7)
      return this.primeField.mul(
        this.primeField.square(r),
        this.primeField.mul(r, e)
      );
    throw new Error("Invalid d paramter, must be 3, 5 or 7");
  }
  matmulExternal(e) {
    const r = this.params.t;
    if (r == 2) {
      const i = this.primeField.add(e[0], e[1]);
      e[0] = this.primeField.add(e[0], i), e[1] = this.primeField.add(e[1], i);
    } else if (r == 3) {
      const i = this.primeField.add(
        this.primeField.add(e[0], e[1]),
        e[2]
      );
      e[0] = this.primeField.add(e[0], i), e[1] = this.primeField.add(e[1], i), e[2] = this.primeField.add(e[2], i);
    } else if (r == 4 || r == 8 || r == 12 || r == 16 || r == 20 || r == 24) {
      const i = r / 4;
      for (let s = 0; s < i; s++) {
        const t = s * 4;
        let h = e[t];
        h = this.primeField.add(h, e[t + 1]);
        let n = e[t + 2];
        n = this.primeField.add(n, e[t + 3]);
        let o = e[t + 1];
        o = this.primeField.add(o, o), o = this.primeField.add(o, n);
        let F = e[t + 3];
        F = this.primeField.add(F, F), F = this.primeField.add(F, h);
        let a = n;
        a = this.primeField.add(a, a), a = this.primeField.add(a, a), a = this.primeField.add(a, F);
        let m = h;
        m = this.primeField.add(m, m), m = this.primeField.add(m, m), m = this.primeField.add(m, o);
        let c = F;
        c = this.primeField.add(c, m);
        let _ = o;
        _ = this.primeField.add(_, a), e[t] = c, e[t + 1] = m, e[t + 2] = _, e[t + 3] = a;
      }
      const d = [
        this.primeField.zero,
        this.primeField.zero,
        this.primeField.zero,
        this.primeField.zero
      ];
      for (let s = 0; s < 4; s++) {
        d[s] = e[s];
        for (let t = 1; t < i; t++)
          d[s] = this.primeField.add(d[s], e[4 * t + s]);
      }
      for (let s = 0; s < e.length; s++)
        e[s] = this.primeField.add(e[s], d[s % 4]);
    } else
      throw new Error(
        "Invalid t parameter, must be 2, 3, 4, 8, 12, 16, 20 or 24"
      );
    return e;
  }
  matmulInternal(e) {
    const r = this.params.t;
    if (r == 2) {
      const i = this.primeField.add(e[0], e[1]);
      e[0] = this.primeField.add(e[0], i), e[1] = this.primeField.add(
        this.primeField.add(e[1], e[1]),
        i
      );
    } else if (r == 3) {
      const i = this.primeField.add(
        this.primeField.add(e[0], e[1]),
        e[2]
      );
      e[0] = this.primeField.add(e[0], i), e[1] = this.primeField.add(e[1], i), e[2] = this.primeField.add(
        this.primeField.add(e[2], e[2]),
        i
      );
    } else if (r == 4 || r == 8 || r == 12 || r == 16 || r == 20 || r == 24) {
      let i = e[0];
      for (let d = 1; d < r; d++)
        i = this.primeField.add(i, e[d]);
      for (let d = 0; d < e.length; d++)
        e[d] = this.primeField.add(
          this.primeField.mul(this.params.mat_internal_diag_m_1[d], e[d]),
          i
        );
    } else
      throw new Error(
        "Invalid t parameter, must be 2, 3, 4, 8, 12, 16, 20 or 24"
      );
    return e;
  }
  permute(e) {
    const r = this.params.t;
    if (e.length != r)
      throw new Error("Invalid input length");
    let i = e;
    this.matmulExternal(i);
    for (let s = 0; s < this.params.rounds_f_beginning; s++)
      i = this.addRc(i, this.params.round_constants[s]), i = this.sbox(i), this.matmulExternal(i);
    const d = this.params.rounds_f_beginning + this.params.rounds_p;
    for (let s = this.params.rounds_f_beginning; s < d; s++)
      i[0] = this.primeField.add(
        i[0],
        this.params.round_constants[s][0]
      ), i[0] = this.sboxP(i[0]), this.matmulInternal(i);
    for (let s = d; s < this.params.rounds; s++)
      i = this.addRc(i, this.params.round_constants[s]), i = this.sbox(i), this.matmulExternal(i);
    return i;
  }
  addRc(e, r) {
    return e.map((i, d) => this.primeField.add(i, r[d]));
  }
}
function w(l, e, r, i, d, s, t) {
  const h = r / 2, n = r + i;
  return {
    t: l,
    d: e,
    rounds_f_beginning: h,
    rounds_p: i,
    rounds_f_end: h,
    rounds: n,
    mat_internal_diag_m_1: d,
    _mat_internal: s,
    round_constants: t
  };
}
export {
  I as F1Field,
  x as Poseidon2,
  w as getPoseidon2Params
};
//# sourceMappingURL=poseidon2.mjs.map
