// Generated by dts-bundle-generator v7.1.0

export interface Poseidon2Params {
	t: number;
	d: number;
	rounds_f_beginning: number;
	rounds_p: number;
	rounds_f_end: number;
	rounds: number;
	mat_internal_diag_m_1: bigint[];
	_mat_internal: bigint[][];
	round_constants: bigint[][];
}
declare class F1Field {
	prime: bigint;
	zero: bigint;
	one: bigint;
	constructor(prime: bigint);
	e(x: number | bigint | string): bigint;
	add(x: bigint, y: bigint): bigint;
	sub(x: bigint, y: bigint): bigint;
	mul(x: bigint, y: bigint): bigint;
	square(x: bigint): bigint;
	div(x: bigint, y: bigint): bigint;
}
declare class Poseidon2 {
	params: Poseidon2Params;
	primeField: F1Field;
	constructor(params: Poseidon2Params, primeField: F1Field);
	getT(): number;
	sbox(input: bigint[]): bigint[];
	sboxP(input: bigint): bigint;
	matmulExternal(input: bigint[]): bigint[];
	matmulInternal(input: bigint[]): bigint[];
	permute(input: bigint[]): bigint[];
	addRc(input: bigint[], rc: bigint[]): bigint[];
}
export type IHashOut = [
	bigint,
	bigint,
	bigint,
	bigint
];
export declare function hashNToMNoPad(inputs: bigint[] | BigUint64Array, numOutputs: number): bigint[];
export declare function hashPad(input: bigint[]): bigint[];
export declare function hashNoPad(input: bigint[] | BigUint64Array): IHashOut;
export declare function hashCapacity(inputs: bigint[], capacity: bigint[]): bigint[];
export declare function twoToOne(a: IHashOut, b: IHashOut): IHashOut;
export declare const Poseidon2Goldilocks12: Poseidon2;
export declare const F: F1Field;
export declare const permute: (input: bigint[]) => bigint[];

export {};
